local Rayfield = loadstring(game:HttpGetAsync('https://sirius.menu/rayfield', true))()

local Window = Rayfield:CreateWindow({
   Name = "Mini Yushi Cheater",
   LoadingTitle = "Loading...",
   LoadingSubtitle = "join the MYC server!",
   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "MYC HUB"
   },
   Discord = {
      Enabled = true,
      Invite = "https://discord.gg/5MG7Gx5psK", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },
   KeySystem = true, -- Set this to true to use our key system
   KeySettings = {
      Title = "Key Access",
      Subtitle = "Key System",
      Note = "Join the discord server to get the key",
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

Rayfield:Notify({  
    Title = "Mini Yushi Cheater",  
    Content = "Mini Yushi Cheater loaded, click K to close.",  
    Duration = 6.5,  
})  


local MTab = Window:CreateTab("Main")
local FTab = Window:CreateTab("Fun")
local TTab = Window:CreateTab("Trolling")
local STab = Window:CreateTab("Settings")

local FakeButton = TTab:CreateButton({  
    Name = "Fake Admin Team UI",  
    Callback = function()  
        local success, err = pcall(function()  
            loadstring(game:HttpGet("https://raw.githubusercontent.com/game-hax/uca/main/release/uca.min.lua"))()  
        end)  
    end  
})

local BonkersButton = FTab:CreateButton({  
    Name = "Go Bonkers",  
    Callback = function()  
        local TweenService = game:GetService("TweenService")
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local rootPart = character:WaitForChild("HumanoidRootPart")

        local function createBonkersCFrame()
            local randomOffset = Vector3.new(math.random(-5, 5), math.random(5, 10), math.random(-5, 5))
            local randomRotation = math.rad(math.random(-180, 180))
            return rootPart.CFrame * CFrame.new(randomOffset) * CFrame.Angles(randomRotation, randomRotation, randomRotation)
        end

        local tweenInfo = TweenInfo.new(10, Enum.EasingStyle.Elastic, Enum.EasingDirection.InOut)
        local bonkersCFrame = createBonkersCFrame()
        local tween = TweenService:Create(rootPart, tweenInfo, {CFrame = bonkersCFrame})

        tween:Play()  
    end  
})


local ColorPicker = FTab:CreateColorPicker({  
    Name = " Skin Color Picker [CLIENT]",  
    Color = Color3.fromRGB(255, 255, 255),  -- Default color (white)  
    Flag = "ColorPicker1",  -- Unique identifier for configuration saving  
    Callback = function(Value)  
        local player = game.Players.LocalPlayer  
        local character = player.Character or player.CharacterAdded:Wait()  

        -- Check for the character's humanoid and body colors  
        local humanoid = character:FindFirstChildOfClass("Humanoid")  
        local bodyColors = character:FindFirstChild("Body Colors")  

        if humanoid and bodyColors then  
            -- Update the skin colors of the character based on the selected color  
            bodyColors.HeadColor3 = Value  -- Change head color  
            bodyColors.TorsoColor3 = Value  -- Change torso color  
            bodyColors.LeftLegColor3 = Value  -- Change left leg color  
            bodyColors.RightLegColor3 = Value  -- Change right leg color  
            bodyColors.LeftArmColor3 = Value  -- Change left arm color  
            bodyColors.RightArmColor3 = Value  -- Change right arm color  
        end  
    end  
})

local player = game.Players.LocalPlayer  

local targetDisplayName = "" -- Variable to store the display name input  

-- Create a Toggle button to move to the target player  
local ToggleButton = TTab:CreateToggle({  
    Name = "Toggle Move",  
    Flag = "ToggleMove", -- Unique identifier for configuration  
    Callback = function()  
        -- Get the target player by display name  
        local targetPlayer = game.Players:FindFirstChild(targetDisplayName)  
        if targetPlayer and targetPlayer.Character then  
            local targetHumanoidRootPart = targetPlayer.Character:WaitForChild("HumanoidRootPart")  
            local localCharacter = player.Character  
            local localHumanoidRootPart = localCharacter:WaitForChild("HumanoidRootPart")  

            -- Move towards the target character  
            while isToggled and targetPlayer and targetPlayer.Character do  
                -- Update local character's position  
                localHumanoidRootPart.CFrame = targetHumanoidRootPart.CFrame * CFrame.new(0, 0, -3) -- Reposition behind the target  
                wait(0.1) -- Update frequency  
            end  
        end  
    end  
})

local Input = TTab:CreateInput({  
    Name = "Bang Someone",  
    PlaceholderText = "Name Here", 
    RemoveTextAfterFocusLost = True, 
    Callback = function(Text)  
        targetDisplayName = inputText -- Store the input for use later  
    end  
})
